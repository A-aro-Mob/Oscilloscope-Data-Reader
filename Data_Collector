# Oscilloscope Type: Siglent SDS 1104X-E

# Imports
import pyvisa
import numpy as np

# Resource Manager
rm = pyvisa.ResourceManager()
scope = rm.open_resource(rm.list_resources()[0])

def main():
    rawdata = get_raw_data()
    voltages = process_raw_data(rawdata)
    times = generate_time_axis(len(voltages))
    create_csv(times, voltages)

# Getting raw data from oscilloscope
def get_raw_data():
    data_amount = int(data_length())

    # Commands to get data
    scope.write(':STOP')
    scope.write(f"WFSU SP,2,NP,{data_amount},FP,100")
    scope.write('C1:WF? DAT2')
    rawdata = scope.read_raw()

    return rawdata

# Processing raw data into voltage values
def process_raw_data(rawdata):
    # Find the start of the binary block
    start = rawdata.find(b'#')
    header_len = int(rawdata[start+1:start+2])
    data_len = int(rawdata[start+2:start+2+header_len])
    data_start = start + 2 + header_len
    data = rawdata[data_start:data_start + data_len]

    # Convert to signed integers
    wave = np.frombuffer(data, dtype=np.uint8).astype(np.int16)
    wave[wave > 127] -= 255

    # Query vertical scale and offset
    vdiv = float(scope.query('C1:VDIV?').split()[1][:-1])
    voffset = float(scope.query('C1:OFST?').split()[1][:-1])

    # Convert to voltage values
    voltages = wave * (vdiv / 25) - voffset
    voltages = np.round(voltages, 4)

    return voltages

# Generate time axis based on TDIV
def generate_time_axis(num_points):
    tdiv = float(scope.query('TDIV?').split()[1][:-1])  # e.g., 'TDIV 1.00E-03S'
    total_time = 14 * tdiv  # 14 divisions across the screen

    # Center around 0 or start from 0
    time_input = input("Do you want the time axis centered around 0? (y/n): ").strip().lower()
    if time_input == 'y':
        times = np.linspace(-total_time/2, total_time/2, num_points) # Centering time around 0
    else:
        times = np.linspace(0, total_time, num_points) # Starting time from 0

    times = np.round(times, 4)
    return times

# Getting user input for data length
def data_length():
    length = input("How many data points do you want to collect? ")
    return length

# Creating CSV file from time and voltage data
def create_csv(times, voltages):
    combined = np.column_stack((times, voltages))
    np.savetxt("Voltage.csv", combined, delimiter=",", fmt="%.4f,%.4f", header="Time(s),Voltage(V)", comments='')
    return

def create_array(times, voltages):
    data_array = np.column_stack((times, voltages))
    return data_array


if __name__ == "__main__":
    main()